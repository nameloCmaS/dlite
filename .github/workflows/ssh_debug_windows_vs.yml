name: CI Windows Visual Studio

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  push:

jobs:
  build:
    name: Github Windows Visual Studio
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          which python3
          python3 --version

          # Need to ensure utf-8 mode on Windows
          echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
          echo "PYTHONUTF8=1" >> $GITHUB_ENV

          python3 -m pip install --upgrade pip
          python3 -m pip --version

          python3 -m pip install -U setuptools wheel
          python3 -m pip install -r requirements.txt -r requirements_full.txt -r requirements_dev.txt

      - name: Check numpy
        run: |
          python3 -c 'import numpy as np; print(np.get_include())'

      - name: List installed Python packages
        run: |
          uname -a
          python --version
          pip3 freeze

      # We do not install rdflib0-dev here, since we want to  
      # DLite both with and without rdflib (Redland) support and the
      # case with rdflib is already covered by the ci_build_wheel
      # workflow for Linux systems.

      # Fixme: Automatic detection of installed Visual Studio?
      - name: Configure
        env:
          DLITE_IMPORTSKIP_EXITCODE: 1
        run: |
          cmake -B build . \
            -DCMAKE_CONFIGURATION_TYPES:STRING=Release \
            -G "Visual Studio 17 2022" \
            -DCMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE=x64 \
            -A x64 \
            -DFORCE_EXAMPLES=ON \
            -DWITH_FORTRAN=NO \
            -T fortran=ifx \
            -DPython3_FIND_STRATEGY=LOCATION \
            -DPython3_ROOT_DIR=$(python3 -c 'import sys; print(sys.exec_prefix)')

      - name: Build
        run: |
          cmake --build . --config Release
        working-directory: build

      - name: Install
        run: |
          cmake --install . --config Release
        working-directory: build

      - name: Test
        env:
          DLITE_PYDEBUG: ""
        run: |
          ctest --build-config Release || ctest --build-config Release --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Test with all behavior changes disabled
        env:
          DLITE_BEHAVIOR: OFF
        run: |
          ctest --build-config Release || ctest --build-config Release --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Test with all behavior changes enabled
        env:
          DLITE_BEHAVIOR: ON
        run: |
          ctest --build-config Release || ctest --build-config Release --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Build wheel
        run: |
          python3 -m pip wheel -w dist ./python

      - name: Install python package and test the installation
        run: |
          python3 -m pip install --user dist/*.whl
          python3 bindings/python/tests/__main__.py

      - uses: mxschmitt/action-tmate@v3
        if: failure()
