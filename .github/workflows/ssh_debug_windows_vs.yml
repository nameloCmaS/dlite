name: CI Windows Visual Studio

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  push:

jobs:
  build:
    name: Github Windows Visual Studio
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # - name: Setup MSYS2
      #   id: msys2
      #   uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: MINGW64
      #     update: true
      #     release: false
      #     path-type: inherit
      #     pacboy: >-
      #       python:p
      #       python-argon2_cffi:p
      #       python-cffi:p
      #       python-numpy:p
      #       python-pandas:p
      #       python-paramiko:p
      #       python-pip:p
      #       python-pyarrow:p
      #       python-pydantic-core:p
      #       python-rdflib:p
      #       python-yaml:p
      #       cmake:p
      #       gcc:p
      #       hdf5:p
      #       swig:p
      #       libxml2:p
      #       libxslt:p

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

# # # Debug .dll loaders
# PATH="/c/Program Files (x86)/Windows Kits/10/Debuggers/x64:$PATH"
# cd src/utils/tests
# _EXE=test_err.exe
# gflags -i $_EXE +sls
# cdb -c "g;q" $_EXE

      - name: Install Python dependencies
        run: |
          which python3
          python3 --version

          # --system-site-packages allows the venv to use
          # pacman installed packages which won't compile
          # on MinGW without patching. Some runner images have
          # a locked install requiring a venv.
          # python3 -m venv --system-site-packages venv
          # source venv/bin/activate
          
          # due to the way packages are installed in both
          # the base MinGW Python install for compiled packages
          # and the remaining platform independant packages are
          # installed to the venv, the paths Python uses get mixed
          # up, so we give a hint with the below env var.
          # a ._pth file may work instead. The env var
          # __PYVENV_LAUNCHER__ should also work (and is better documented).
          # echo "PYTHONEXECUTABLE=$VIRTUAL_ENV/bin/python3.exe" >> $GITHUB_ENV

          # Need to ensure utf-8 mode on Windows
          echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
          echo "PYTHONUTF8=1" >> $GITHUB_ENV

          python3 -m pip install --upgrade pip
          python3 -m pip --version

          python3 -m pip install -U setuptools wheel
          python3 -m pip install -r requirements.txt -r requirements_full.txt -r requirements_dev.txt

      - name: Check numpy
        run: |
          python3 -c 'import numpy as np; print(np.get_include())'

      - name: List installed Python packages
        run: |
          uname -a
          python --version
          pip3 freeze

      - name: Setup Fortran
        uses: nameloCmaS/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: intel
      # - name: Install Fortran Visual Studio Integration
      #   shell: cmd
      #   run: |
      #     %TEMP%\webimage_extracted\bootstrapper.exe -s --action install --components=%2 --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=1 --log-dir=%TEMP%

      # We do not install rdflib0-dev here, since we want to  
      # DLite both with and without rdflib (Redland) support and the
      # case with rdflib is already covered by the ci_build_wheel
      # workflow for Linux systems.
      # - name: Install dependencies
      #   run: |
      #     CHOCO_INSTALL=(
      #       # libxml2-dev
      #       # libxslt-dev
      #       # libhdf5-dev
      #       # doxygen.install
      #       # Graphviz
      #       # python3
      #       # python3-pip
      #       # python3-dev
      #       # python3-numpy
      #       # python3-yaml
      #     )
      #     choco install ${CHOCO_INSTALL[@]}
      - uses: robinraju/release-downloader@v1
        with:
          # The source repository path.
          # Expected format {owner}/{repo}
          # Default: ${{ github.repository }}
          repository: 'lxml/libxml2-win-binaries'

          # A flag to set the download target as latest release
          # The default value is 'false'
          latest: true

          # The name of the file to download.
          # Use this field only to specify filenames other than tarball or zipball, if any.
          # Supports wildcard pattern (eg: '*', '*.deb', '*.zip' etc..)
          fileName: 'lib*.win64.zip'

          # Download the attached tarball (*.tar.gz)
          tarBall: false

          # Download the attached zipball (*.zip)
          zipBall: false

          # Relative path under $GITHUB_WORKSPACE to place the downloaded file(s)
          # It will create the target directory automatically if not present
          # eg: out-file-path: "my-downloads" => It will create directory $GITHUB_WORKSPACE/my-downloads
          out-file-path: ''

          # A flag to set if the downloaded assets are archives and should be extracted
          # Checks all downloaded files if they end with zip, tar or tar.gz and extracts them, if true.
          # Prints a warning if enabled but file is not an archive - but does not fail.
          extract: true

      - name: Configure
        env:
          DLITE_IMPORTSKIP_EXITCODE: 1
          # CMAKE_LIBRARY_PATH: ${{ steps.msys2.outputs.msys2-location }}
        run: |
          # C:\Users\RUNNER~1\AppData\Local\Temp
          # C:/Users/RUNNER~1/AppData/Local/Temp
          # C:/msys64/tmp/webimage.exe -s -x -f C:/msys64/tmp/webimage_extracted --log C:/msys64/tmp/extract.log
          # C:/Users/RUNNER~1/AppData/Local/Temp/webimage_extracted/bootstrapper.exe -s --action install --components=intel.oneapi.win.ifort-compiler:intel.oneapi.win.cpp-dpcpp-common --eula=accept -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=1 --log-dir=C:/Users/RUNNER~1/AppData/Local/Temp
          # CMAKE_INCLUDE_PATH='$GITHUB_WORKSPACE'
          cmake -B build . \
            -G "Visual Studio 17 2022" \
            -DFORCE_EXAMPLES=ON \
            -DWITH_FORTRAN=YES \
            -DPython3_FIND_STRATEGY=LOCATION \
            -DPython3_ROOT_DIR=$(python3 -c 'import sys; print(sys.exec_prefix)') \
            -T fortran=ifx \
            -DCMAKE_Fortran_COMPILER="$ONEAPI_ROOT/compiler/latest/bin/ifx.exe" \
            --debug-trycompile
        # --trace-expand \
        # --trace-source=cmake/MakePlatformPaths.cmake \
        # -Wno-dev \
        # 2>&1 \
        # | grep dlite_PATH_ESCAPED_NATIVE

      - name: Build
        run: |
          cmake --build .
        working-directory: build

      - uses: mxschmitt/action-tmate@v3
        if: failure()

      - name: Install
        run: |
          cmake --install .
        working-directory: build

      - name: Test
        env:
          DLITE_PYDEBUG: ""
        run: |
          ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Test with all behavior changes disabled
        env:
          DLITE_BEHAVIOR: OFF
        run: |
          ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Test with all behavior changes enabled
        env:
          DLITE_BEHAVIOR: ON
        run: |
          ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Build wheel
        run: |
          python3 -m pip wheel -w dist ./python

      - name: Install python package and test the installation
        run: |
          python3 -m pip install --user dist/*.whl
          python3 bindings/python/tests/__main__.py
