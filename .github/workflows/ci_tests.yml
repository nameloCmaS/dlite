name: CI tests

# This CI builds DLite and runs (almost) all tests.
#
# The following plugins are not tested here, since they depends on an external service:
#
# Protocol plugins:
#   - sftp
#
# Storage plugins:
#   - postgresql
#   - mongodb
#   - redis
#
# Please remember to update respective plugin docstring if this list changes.
#

on: [push]

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # TODO: Setup matrix with multiple versions
      # TODO: Setup cache
      # TODO: Fix MacOS & Windows tasks
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          # cache: "pip"
          
      # Based on: https://github.com/pydata/xarray/blob/main/.github/workflows/ci.yaml
      - name: Set environment variables
        run: |
          echo "PYTHON_VERSION=3.10" >> $GITHUB_ENV


        # We do not install rdflib0-dev here, since we want to test
        # DLite both with and without rdflib (Redland) support and the
        # case with rdflib is already covered by the ci_build_wheel
        # workflow for Linux systems.
      - name: Install dependencies
        run: |
          if [[ ${{ matrix.os }} == windows* ]] ;
          then
            echo "CONDA_ENV_FILE=ci/requirements/environment-windows.yml" >> $GITHUB_ENV
            
          elif [[ ${{ matrix.os }} == ubuntu* ]] ;
          then
            APT_INSTALL=(
              libxml2-dev
              libxslt-dev
              libhdf5-dev
              doxygen
              graphviz
              python3
              python3-pip
              python3-dev
              python3-numpy
              python3-yaml
            )
            sudo apt-get update --fix-missing && \
            sudo apt-get install ${APT_INSTALL[@]}
                
          elif [[ ${{ matrix.os }} == macos* ]] ;
          then
            BREW_INSTALL=(
              # libxml2
              # libxslt
              hdf5
              doxygen
              graphviz
              # gfortran
            )
            brew install --formula ${BREW_INSTALL[@]}

          else
            echo "Unknown os `${{ matrix.os }}`. Should not reach here!"
          fi

  
      - name: Install Python dependencies
        run: |
          which python3
          python3 --version
          python3 -m pip --version
          python3 -m pip install --upgrade pip
          python3 -m pip install -U setuptools wheel
          python3 -m pip install -r requirements.txt -r requirements_full.txt -r requirements_dev.txt
  
      - name: Check numpy
        run: |
          python3 -c 'import numpy as np; print(np.get_include())'
  
      - name: List installed Python packages
        run: |
          uname -a
          python --version
          pip freeze
  
      - name: Configure
        env:
          DLITE_IMPORTSKIP_EXITCODE: 1
        run: |
          if [[ ${{ matrix.os }} == macos* ]] ;
          then
            # TODO: The below can be updated to use the action at
            # https://github.com/fortran-lang/setup-fortran
            # which can be used for the Windows install also
            # This will avoid updating the version to suit the updated runners
            # from time to time
            MACOS_GFORTRAN="-DCMAKE_Fortran_COMPILER=$(which gfortran-13)"
          fi

          CFLAGS='-Wno-missing-field-initializers' \
          cmake -B build . \
            -DFORCE_EXAMPLES=ON \
            -DWITH_FORTRAN=YES \
            -DPython3_FIND_STRATEGY=LOCATION \
            -DPython3_ROOT_DIR=$(python3 -c 'import sys; print(sys.exec_prefix)') \
            ${MACOS_GFORTRAN}

      - name: Build
        run: |
          echo Current dir:
          echo $PWD
          cmake --build .
        working-directory: ./build

      - name: Install
        run: cmake --install .
        working-directory: ./build

      - name: Test
        env:
          DLITE_PYDEBUG: ""
        run: ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: ./build
  
      # TODO: Temp only debug output...
      # On Linux the default path is:
      #   /home/runner/work/<repo>/<repo>
      # accessible as $GITHUB_WORKSPACE
      # In this repo's case it is:
      #   /home/runner/work/dlite/dlite
      # which unless the default is overridden,
      # the working-directory nodes are relative to.
      # 
      # Install files for this repo are in in:
      #   /home/runner/.local
      # 
      - name: Check RPATHS on Linux for examples
        working-directory: ./build/examples
        run: |
          echo Current dir:
          echo $PWD
          if [[ ${{ matrix.os }} == ubuntu* ]] ;
          then
              sudo apt-get install binutils
              objdump -x ./ex1/dlite-example-1 | grep RPATH
              objdump -x ./ex2/dlite-example-2 | grep RPATH
              objdump -x ./ex3/dlite-example-3 | grep RPATH
              objdump -x ./ex4/dlite-example-4 | grep RPATH
          elif [[ ${{ matrix.os }} == macos* ]] ;
          then
              otool -l ./ex1/dlite-example-1 | grep RPATH -A2
              otool -l ./ex2/dlite-example-2 | grep RPATH -A2
              otool -l ./ex3/dlite-example-3 | grep RPATH -A2
              otool -l ./ex4/dlite-example-4 | grep RPATH -A2
          fi

      - name: Test with all behavior changes disabled
        env:
          DLITE_BEHAVIOR: OFF
        run: ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: ./build
  
      - name: Test with all behavior changes enabled
        env:
          DLITE_BEHAVIOR: ON
        run: ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: ./build
  
      - name: Build Linux wheel
        run: python3 -m pip wheel -w dist ./python
  
      - name: Install python package and test the installation
        run: |
          python3 -m pip install --user dist/*.whl
          python3 bindings/python/tests/__main__.py
