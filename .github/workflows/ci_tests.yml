name: CI tests

# This CI builds DLite and runs (almost) all tests.
#
# The following plugins are not tested here, since they depend on an external service:
#
# Protocol plugins:
#   - sftp
#
# Storage plugins:
#   - postgresql
#   - mongodb
#   - redis
#
# Please remember to update respective plugin docstring if this list changes.
#

# TODO: Split jobs from configure, then build, then package, install etc
# TODO: Windows builds: Native using VS (MSVCRT & UCRT libraries), Native using VS plus Anaconda, MingW, CYGWIN, Cross compiled with MingW on Ubuntu, Cross compiled on ? as 32bit (i686)?
on:
  push:

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.subsystem }}-py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]
        subsystem: [none]
        include:
          - os: ubuntu-latest
            python-version: "3.8"
          - os: ubuntu-latest
            python-version: "3.9"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: ubuntu-latest
            python-version: "3.13"
          - os: windows-latest
            subsystem: mingw

    steps:
      - name: Setup MSYS2
        id: msys2
        if: ${{ matrix.subsystem == 'mingw' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          release: false
          path-type: inherit
          pacboy: >-
            python:p
            python-argon2_cffi:p
            python-cffi:p
            python-numpy:p
            python-pandas:p
            python-paramiko:p
            python-pip:p
            python-pyarrow:p
            python-pydantic-core:p
            python-rdflib:p
            python-yaml:p
            cmake:p
            gcc:p
            hdf5:p
            swig:p
            libxml2:p
            libxslt:p

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set Python version environment var
        run: |
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> "$GITHUB_ENV"


        # We do not install rdflib0-dev here, since we want to  
        # DLite both with and without rdflib (Redland) support and the
        # case with rdflib is already covered by the ci_build_wheel
        # workflow for Linux systems.
      - name: Install ${{ matrix.os }} dependencies
        run: |
          if [[ ${{ matrix.os }} == ubuntu* ]] ;
          then
            APT_INSTALL=(
              # libxml2-dev
              # libxslt-dev
              libhdf5-dev
              # python3
              # python3-pip
              # python3-dev
              # python3-numpy
              # python3-yaml
            )
            sudo apt-get update --fix-missing
            sudo apt-get install ${APT_INSTALL[@]}
                
          elif [[ ${{ matrix.os }} == macos* ]] ;
          then
            BREW_INSTALL=(
              hdf5
            )
            brew install --formula ${BREW_INSTALL[@]}

          fi


      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          if [[ ${{ matrix.os }} == ubuntu* ]] || [[ ${{ matrix.os }} == macos* ]] ;
          then
            which python3
            python3 --version
            python3 -m pip --version
            python3 -m pip install --upgrade pip
            python3 -m pip install -U setuptools wheel
            python3 -m pip install -r requirements.txt -r requirements_full.txt -r requirements_dev.txt
          
          elif [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == none ]] ;
          then
            which python3
            python3 --version

            # Need to ensure utf-8 mode on Windows
            echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
            echo "PYTHONUTF8=1" >> $GITHUB_ENV

            python3 -m pip install --upgrade pip
            python3 -m pip --version

            python3 -m pip install -U setuptools wheel
            python3 -m pip install -r requirements.txt -r requirements_full.txt -r requirements_dev.txt

          elif [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            which python3
            python3 --version

            # --system-site-packages allows the venv to use
            # pacman installed packages which won't compile
            # on MinGW without patching. Some runner images have
            # a locked install requiring a venv.
            python3 -m venv --system-site-packages venv
            source venv/bin/activate
            
            # due to the way packages are installed in both
            # the base MinGW Python install for compiled packages
            # and the remaining platform independant packages are
            # installed to the venv, the paths Python uses get mixed
            # up, so we give a hint with the below env var.
            # a ._pth file may work instead. The env var
            # __PYVENV_LAUNCHER__ should also work (and is better documented).
            echo "PYTHONEXECUTABLE=$VIRTUAL_ENV/bin/python3.exe" >> $GITHUB_ENV

            # Need to ensure utf-8 mode on Windows
            echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
            echo "PYTHONUTF8=1" >> $GITHUB_ENV

            python3 -m pip install --upgrade pip
            python3 -m pip --version

            python3 -m pip install -U setuptools wheel

            # requirements.txt is omitted as only contains numpy.
            # This needs to be and is installed by pacman.
            python3 -m pip install -r requirements_full.txt -r examples/mappings/requirements.txt

            # Note: Uses MinGW versions of dev tools for building
            # instead: cmake and swig. Thus requirements_dev.txt is not used.

          fi

      - name: Check numpy
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source venv/bin/activate
          fi
          python3 -c 'import numpy as np; print(np.get_include())'

      - name: List installed Python packages
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source venv/bin/activate
          fi
          uname -a
          python --version
          pip freeze
      
      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        if: ${{ startsWith(matrix.os, 'macos') }}
        with:
          compiler: gcc

      - name: Configure CMake
        shell: pwsh
        env:
          DLITE_IMPORTSKIP_EXITCODE: 1
        run: |
          if [[ ${{ matrix.os }} == ubuntu* ]] || [[ ${{ matrix.os }} == macos* ]] ;
          then
            cmake -B build . `
              -DFORCE_EXAMPLES=ON `
              -DWITH_FORTRAN=YES `
              -DPython3_FIND_STRATEGY=LOCATION `
              -DPython3_ROOT_DIR=$(python3 -c 'import sys; print(sys.exec_prefix)')

          elif [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == none ]] ;
          then
            cmake -B build . \
              -DCMAKE_CONFIGURATION_TYPES:STRING=Release \
              -G "Visual Studio 17 2022" \
              -DCMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE=x64 \
              -A x64 \
              -DFORCE_EXAMPLES=ON \
              -DWITH_FORTRAN=NO \
              -T fortran=ifx \
              -DPython3_FIND_STRATEGY=LOCATION \
              -DPython3_ROOT_DIR=$(python3 -c 'import sys; print(sys.exec_prefix)')
          
          elif [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source venv/bin/activate
            cmake -B build . \
              -DFORCE_EXAMPLES=ON \
              -DWITH_FORTRAN=NO \
              -DPython3_FIND_STRATEGY=LOCATION \
              -DPython3_ROOT_DIR=$(python3 -c 'import sys; print(sys.exec_prefix)') \
              -G "MinGW Makefiles"

          fi
 
      - name: Build
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source ../venv/bin/activate
          fi
          cmake --build . --config Release
        working-directory: build
  
      - name: Install
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source ../venv/bin/activate
          fi
          cmake --install . --config Release
        working-directory: build

      - name: Test
        env:
          DLITE_PYDEBUG: ""
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source ../venv/bin/activate
          fi
          ctest --build-config Release || ctest --build-config Release --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Test with all behavior changes disabled
        env:
          DLITE_BEHAVIOR: OFF
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source ../venv/bin/activate
          fi
          ctest --build-config Release || ctest --build-config Release --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Test with all behavior changes enabled
        env:
          DLITE_BEHAVIOR: ON
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source ../venv/bin/activate
          fi
          ctest --build-config Release || ctest --build-config Release --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Build ${{ matrix.os }} wheel
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source venv/bin/activate
          fi
          python3 -m pip wheel -w dist ./python

      - name: Install Python package and test the installation
        run: |
          if [[ ${{ matrix.os }} == windows* ]] && [[ ${{ matrix.subsystem }} == mingw ]] ;
          then
            source venv/bin/activate
          fi
          python3 -m pip install --user dist/*.whl
          python3 bindings/python/tests/__main__.py
