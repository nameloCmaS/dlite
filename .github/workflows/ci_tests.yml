name: CI tests

# This CI builds DLite and runs (almost) all tests.
#
# The following plugins are not tested here, since they depend on an external service:
#
# Protocol plugins:
#   - sftp
#
# Storage plugins:
#   - postgresql
#   - mongodb
#   - redis
#
# Please remember to update respective plugin docstring if this list changes.
#

on: [push]

jobs:
  build:
    name: dlite-build ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]
        # python-version: ["3.8", "3.10", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"


      # Based on: https://github.com/pydata/xarray/blob/main/.github/workflows/ci.yaml
      - name: Set environment variables
        run: |
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> "$GITHUB_ENV"


        # We do not install rdflib0-dev here, since we want to  
        # DLite both with and without rdflib (Redland) support and the
        # case with rdflib is already covered by the ci_build_wheel
        # workflow for Linux systems.
      - name: Install dependencies
        run: |
          if [[ ${{ matrix.os }} == windows* ]] ;
          then
            CHOCO_INSTALL=(
              # libxml2-dev
              # libxslt-dev
              # libhdf5-dev
              doxygen.install
              Graphviz
              # python3
              # python3-pip
              # python3-dev
              # python3-numpy
              # python3-yaml
            )
            # choco install ${CHOCO_INSTALL[@]}
            
          elif [[ ${{ matrix.os }} == ubuntu* ]] ;
          then
            APT_INSTALL=(
              libxml2-dev
              libxslt-dev
              libhdf5-dev
              doxygen
              graphviz
              python3
              python3-pip
              python3-dev
              python3-numpy
              python3-yaml
            )
            sudo apt-get update --fix-missing && \
            sudo apt-get install ${APT_INSTALL[@]}
                
          elif [[ ${{ matrix.os }} == macos* ]] ;
          then
            BREW_INSTALL=(
              # libxml2
              # libxslt
              hdf5
              doxygen
              graphviz
              # gfortran
            )
            brew install --formula ${BREW_INSTALL[@]}

          else
            echo "Unknown os `${{ matrix.os }}`. Should not reach here!"
          fi


      - name: Install Python dependencies
        run: |
          which python3
          python3 --version
          python3 -m pip --version
          python3 -m pip install --upgrade pip
          python3 -m pip install -U setuptools wheel
          python3 -m pip install -r requirements.txt -r requirements_full.txt -r requirements_dev.txt

      - name: Check numpy
        run: |
          python3 -c 'import numpy as np; print(np.get_include())'

      - name: List installed Python packages
        run: |
          uname -a
          python --version
          pip freeze

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: gcc

      - name: Configure
        env:
          DLITE_IMPORTSKIP_EXITCODE: 1
        run: |
          if [[ ${{ matrix.os }} != windows* ]] ;
          then
            unix_env_vars="CFLAGS='-Wno-missing-field-initializers'"
          fi

          ${unix_env_vars} \
          cmake -B build . \
            -DCMAKE_Fortran_COMPILER=${{ steps.setup-fortran.outputs.fc }} \
            -DFORCE_EXAMPLES=ON \
            -DWITH_FORTRAN=YES \
            -DPython3_FIND_STRATEGY=LOCATION \
            -DPython3_ROOT_DIR=$(python3 -c 'import sys; print(sys.exec_prefix)')

      - name: Build
        run: cmake --build .
        working-directory: build
  
      - name: Install
        run: cmake --install .
        working-directory: build

      - name: Test
        env:
          DLITE_PYDEBUG: ""
        run: ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Upload Build as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dlite-build-${{ matrix.os }}
          path: ${{ github.workspace }}/build

      - name: Test with all behavior changes disabled
        env:
          DLITE_BEHAVIOR: OFF
        run: ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Test with all behavior changes enabled
        env:
          DLITE_BEHAVIOR: ON
        run: ctest || ctest --rerun-failed --output-on-failure -V
        working-directory: build

      - name: Build Linux wheel
        run: python3 -m pip wheel -w dist ./python

      - name: Install python package and test the installation
        run: |
          python3 -m pip install --user dist/*.whl
          python3 bindings/python/tests/__main__.py
